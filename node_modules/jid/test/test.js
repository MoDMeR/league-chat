var mocha = require("mocha"),
  should = require("should");

describe("Package", function () {
  it("should load without errors", function () {
    (function () {
      var Jid = require("../");
    }).should.not.throw();
  });
});

describe("Constructor", function () {
  var Jid = require("../");
  it("should instantiate without errors", function () {
    var jid1, jid2, jid3;
    (function () {
      jid1 = new Jid("alice@example.com/home");
      jid2 = new Jid("alice@example.com");
      jid3 = new Jid("example.com");
    }).should.not.throw();
  });
  it("should throw errors when trying to instantiate with malformed Jids", function () {
    (function () {
      var jid = new Jid("al@alice@example.com/home");
    }).should.throw();
    (function () {
      var jid = new Jid("alice@example.com/home/outside");
    }).should.throw();
    (function () {
      var jid = new Jid("");
    }).should.throw();
  });
  it("should not throw when instantiated without parameter", function () {
    (function () {
      var jid = new Jid();
    }).should.not.throw();
  });
  it("should throw when instantiated with parameter not being of type string", function () {
    (function () {
      var jid = new Jid({});
    }).should.throw();
    (function () {
      var jid = new Jid([]);
    }).should.throw();
    (function () {
      var jid = new Jid(null);
    }).should.throw();
    (function () {
      var jid = new Jid(true);
    }).should.throw();
    (function () {
      var jid = new Jid(false);
    }).should.throw();
    (function () {
      var jid = new Jid(2);
    }).should.throw();
  });
  it("should populate the neccessary fields", function () {
    var jid1 = new Jid("alice@example.com/home"),
      jid2 = new Jid("alice@example.com"),
      jid3 = new Jid("example.com");

    jid1.node.should.equal("alice");
    jid1.domain.should.equal("example.com");
    jid1.resource.should.equal("home");

    jid2.node.should.equal("alice");
    jid2.domain.should.equal("example.com");
    (jid2.resource === undefined).should.be.true;

    (jid3.node === undefined).should.be.true;
    jid3.domain.should.equal("example.com");
    (jid3.resource === undefined).should.be.true;
  });
  it("should leave the fields open if no argument is given", function () {
    var jid = new Jid();
    (jid.node === undefined).should.be.true;
    (jid.domain === undefined).should.be.true;
    (jid.resource === undefined).should.be.true;
  });
});

describe("Static functions", function () {
  var Jid = require("../");
  describe("Jid.compare", function () {
    var jid1 = new Jid("alice@example.com/home"),
      jid2 = new Jid("alice@example.com/balkony"),
      jid3 = new Jid("alice@example.com"),
      jid4 = new Jid("alice@another-example.com"),
      jid5 = new Jid("bob@example.com");

    it("should compare ignoring the resource", function () {
      Jid.compare(jid1, jid1).should.be.true;
      Jid.compare(jid1, jid2).should.be.true;
      Jid.compare(jid1, jid3).should.be.true;
      Jid.compare(jid1, jid4).should.be.false;
      Jid.compare(jid1, jid5).should.be.false;
    });
    it("should compare taking the resource into account if wished", function () {
      Jid.compare(jid1, jid1, true).should.be.true;
      Jid.compare(jid1, jid2, true).should.be.false;
      Jid.compare(jid1, jid3, true).should.be.false;
      Jid.compare(jid1, jid4, true).should.be.false;
      Jid.compare(jid1, jid5, true).should.be.false;
    });
  });
  describe("Jid.combine", function () {
    it("should combine different types of Jids correctly", function () {
      var jid1 = new Jid("alice@example.com/home"),
        jid2 = new Jid("alice@example.com"),
        jid3 = new Jid("example.com");
      Jid.combine(jid1).should.equal("alice@example.com/home");
      Jid.combine(jid2).should.equal("alice@example.com");
      Jid.combine(jid3).should.equal("example.com");
    });
  });
  describe("Jid.validate", function () {
    it("should validate Jids correctly", function () {
      Jid.validate("alice@example.com/home").should.be.true;
      Jid.validate("alice@example.com").should.be.true;
      Jid.validate("example.com").should.be.true;
      Jid.validate("example.com/server").should.be.true;
      Jid.validate("al@alice@example.com").should.be.false;
      Jid.validate("al@alice@example.com/home").should.be.false;
      Jid.validate("alice@example.com/home/test").should.be.false;
      Jid.validate("example.com/home/test").should.be.false;
      Jid.validate("al@alice@example.com/home/test").should.be.false;
    });
  });
  describe("Jid.parse", function () {
    it("should parse wellformed Jids correctly", function () {
      var p1 = Jid.parse("alice@example.com/home"),
        p2 = Jid.parse("alice@example.com"),
        p3 = Jid.parse("example.com"),
        p4 = Jid.parse("example.com/server");

      p1.node.should.equal("alice");
      p1.domain.should.equal("example.com");
      p1.resource.should.equal("home");

      p2.node.should.equal("alice");
      p2.domain.should.equal("example.com");
      (p2.resource === undefined).should.be.true;

      (p3.node === undefined).should.be.true;
      p3.domain.should.equal("example.com");
      (p3.resource === undefined).should.be.true;

      (p4.node === undefined).should.be.true;
      p4.domain.should.equal("example.com");
      p4.resource.should.equal("server");
    });
    it("should throw if Jids are not wellformed", function () {
      (function () {
        var p = Jid.parse("al@alice@example.com");
      }).should.throw();
      (function () {
        var p = Jid.parse("al@alice@example.com/home");
      }).should.throw();
      (function () {
        var p = Jid.parse("alice@example.com/home/test");
      }).should.throw();
      (function () {
        var p = Jid.parse("example.com/home/test");
      }).should.throw();
      (function () {
        var p = Jid.parse("al@alice@example.com/home/test");
      }).should.throw();
    });
  });
});

describe("Prototype functions", function () {
  var Jid = require("../"),
    jid1 = new Jid("alice@example.com/home"),
    jid2 = new Jid("alice@example.com/balkony"),
    jid3 = new Jid("alice@example.com"),
    jid4 = new Jid("bob@example.com"),
    jid5 = new Jid();

  describe("jid.equals", function () {
    it("should be a function", function () {
      jid1.equals.should.be.a.Function;
      jid5.equals.should.be.a.Function;
    });
    it("should compare correctly ignoring the resource", function () {
      jid1.equals(jid1).should.be.true;
      jid1.equals(jid2).should.be.true;
      jid1.equals(jid3).should.be.true;
      jid1.equals(jid4).should.be.false;
      jid1.equals(jid5).should.be.false;
    });
    it("should compare taking the resource into account if wished", function () {
      jid1.equals(jid1, true).should.be.true;
      jid1.equals(jid2, true).should.be.false;
      jid1.equals(jid3, true).should.be.false;
      jid1.equals(jid4, true).should.be.false;
      jid1.equals(jid5, true).should.be.false;
    });
  });
  describe("jid.toString", function () {
    it("should be a function", function () {
      jid1.toString.should.be.a.Function;
      jid5.toString.should.be.a.Function;
    });
    it("should create the correct strings", function () {
      jid1.toString().should.equal("alice@example.com/home");
      jid2.toString().should.equal("alice@example.com/balkony");
      jid3.toString().should.equal("alice@example.com");
      jid4.toString().should.equal("bob@example.com");
    });
    it("should throw if no domain is present", function () {
      (function () {
        var s = jid1.toString();
      }).should.not.throw();
      (function () {
        var s = jid2.toString();
      }).should.not.throw();
      (function () {
        var s = jid3.toString();
      }).should.not.throw();
      (function () {
        var s = jid4.toString();
      }).should.not.throw();
      (function () {
        var s = jid5.toString();
      }).should.throw();
    });
  });
  describe("jid.combine", function () {
    it("should be a function", function () {
      jid1.combine.should.be.a.Function;
      jid5.combine.should.be.a.Function;
    });
    it("should create the correct strings", function () {
      jid1.combine().should.equal("alice@example.com/home");
      jid2.combine().should.equal("alice@example.com/balkony");
      jid3.combine().should.equal("alice@example.com");
      jid4.combine().should.equal("bob@example.com");
    });
    it("should throw if no domain is present", function () {
      (function () {
        var c = jid1.combine();
      }).should.not.throw();
      (function () {
        var c = jid2.combine();
      }).should.not.throw();
      (function () {
        var c = jid3.combine();
      }).should.not.throw();
      (function () {
        var c = jid4.combine();
      }).should.not.throw();
      (function () {
        var c = jid5.combine();
      }).should.throw();
    });
  });
});
